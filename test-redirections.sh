#!/bin/bash

echo "üîÑ Test complet des redirections pour melissacolin.ai"
echo "=================================================="

# Fonction pour tester une redirection
test_redirect() {
    local url="$1"
    local expected="$2"
    local description="$3"
    
    echo ""
    echo "üß™ Test: $description"
    echo "URL test√©e: $url"
    echo "Redirection attendue: $expected"
    
    # Obtenir le statut HTTP et l'URL finale
    response=$(curl -s -L -o /dev/null -w "%{http_code}|%{url_effective}|%{redirect_url}" "$url" 2>/dev/null || echo "000||")
    
    IFS='|' read -r status final_url redirect_url <<< "$response"
    
    echo "Statut HTTP: $status"
    echo "URL finale: $final_url"
    
    if [ "$status" = "200" ] && [[ "$final_url" == "$expected"* ]]; then
        echo "‚úÖ SUCC√àS: Redirection correcte"
        return 0
    elif [ "$status" = "301" ] || [ "$status" = "302" ]; then
        echo "üîÑ Redirection interm√©diaire d√©tect√©e"
        if [[ "$final_url" == "$expected"* ]]; then
            echo "‚úÖ SUCC√àS: URL finale correcte"
            return 0
        else
            echo "‚ùå √âCHEC: URL finale incorrecte"
            return 1
        fi
    else
        echo "‚ùå √âCHEC: Statut $status ou URL finale incorrecte"
        return 1
    fi
}

# Tests des redirections critiques
failures=0

# Test 1: www vers non-www
test_redirect "https://www.melissacolin.ai" "https://melissacolin.ai/" "www ‚Üí non-www"
failures=$((failures + $?))

# Test 2: HTTP vers HTTPS  
test_redirect "http://melissacolin.ai" "https://melissacolin.ai/" "HTTP ‚Üí HTTPS"
failures=$((failures + $?))

# Test 3: HTTP www vers HTTPS non-www
test_redirect "http://www.melissacolin.ai" "https://melissacolin.ai/" "HTTP www ‚Üí HTTPS non-www"
failures=$((failures + $?))

# Test 4: Ancien domaine GitHub Pages
test_redirect "https://melissacolin.ai/my-portfolio-dist/" "https://melissacolin.ai/" "Ancien GitHub Pages ‚Üí nouveau domaine"
failures=$((failures + $?))

# Test 5: URLs avec trailing slash
test_redirect "https://melissacolin.ai/projects/" "https://melissacolin.ai/projects" "Suppression trailing slash"
# Ce test peut √©chouer selon la config, c'est normal

echo ""
echo "=================================================="
echo "üìä R√âSUM√â DES TESTS"
echo "=================================================="

if [ $failures -eq 0 ]; then
    echo "üéâ TOUS LES TESTS PASSENT!"
    echo "‚úÖ Toutes les redirections fonctionnent correctement"
    echo "‚úÖ SEO: Pas de duplicate content"
    echo "‚úÖ Canonicalisation: OK"
else
    echo "‚ö†Ô∏è  $failures test(s) ont √©chou√©"
    echo "‚ùå Des probl√®mes de redirection peuvent affecter le SEO"
    echo ""
    echo "üîß ACTIONS RECOMMAND√âES:"
    echo "1. V√©rifier que le fichier .htaccess est bien d√©ploy√© sur Hostinger"
    echo "2. S'assurer que mod_rewrite est activ√©"
    echo "3. V√©rifier la configuration DNS"
    echo "4. Contacter le support Hostinger si n√©cessaire"
fi

echo ""
echo "üîç Tests suppl√©mentaires manuels:"
echo "‚Ä¢ Google Search Console: https://search.google.com/search-console"
echo "‚Ä¢ Test de compatibilit√© mobile: https://search.google.com/test/mobile-friendly"
echo "‚Ä¢ PageSpeed Insights: https://pagespeed.web.dev/"
echo "‚Ä¢ Test de donn√©es structur√©es: https://search.google.com/test/rich-results"

# Test de contenu SEO critique
echo ""
echo "üè∑Ô∏è  V√©rification du contenu SEO..."

main_page=$(curl -s "https://melissacolin.ai" 2>/dev/null || echo "")
if [ -n "$main_page" ]; then
    # V√©rifier H1
    h1_content=$(echo "$main_page" | grep -o '<h1[^>]*>.*</h1>' | head -1 | sed 's/<[^>]*>//g' | xargs)
    if [ -n "$h1_content" ]; then
        echo "‚úÖ H1 trouv√©: $h1_content"
    else
        echo "‚ö†Ô∏è  H1 non d√©tect√© (peut √™tre inject√© par JavaScript)"
    fi
    
    # V√©rifier meta description
    meta_desc=$(echo "$main_page" | grep -o 'meta name="description" content="[^"]*"' | head -1)
    if [ -n "$meta_desc" ]; then
        echo "‚úÖ Meta description trouv√©e"
    else
        echo "‚ö†Ô∏è  Meta description non d√©tect√©e"
    fi
    
    # V√©rifier canonical
    canonical=$(echo "$main_page" | grep -o 'rel="canonical" href="[^"]*"' | head -1)
    if [[ "$canonical" == *"melissacolin.ai"* ]]; then
        echo "‚úÖ URL canonique correcte"
    else
        echo "‚ö†Ô∏è  URL canonique non trouv√©e ou incorrecte"
    fi
else
    echo "‚ùå Impossible de r√©cup√©rer le contenu de la page principale"
fi

echo ""
echo "üèÅ Test termin√©!"
