sequenceDiagram
    participant Client
    participant AuthController
    participant ProfileController
    participant ProjectsController
    participant ArticlesController
    participant ExpertiseController
    participant User
    participant Profile
    participant Project
    participant Article
    participant Expertise
    participant FileUploadService
    participant JWT

    Note over Client,JWT: Authentication Flow
    Client->>AuthController: POST /api/auth/login (username, password)
    AuthController->>User: findOne({where: {username}})
    User-->>AuthController: user
    alt User not found
        AuthController-->>Client: 401 Unauthorized
    else User found
        AuthController->>User: validatePassword(password)
        alt Invalid password
            AuthController-->>Client: 401 Unauthorized
        else Valid password
            AuthController->>JWT: generateToken(user)
            JWT-->>AuthController: token
            AuthController-->>Client: 200 OK (token, user)
        end
    end

    Note over Client,Profile: Profile Management Flow
    Client->>ProfileController: GET /api/profile?lang=en
    ProfileController->>Profile: findOne(include: [ProfileTranslation])
    Profile-->>ProfileController: profile with translations
    ProfileController-->>Client: 200 OK (formatted profile)
    
    Client->>ProfileController: PUT /api/profile (translations)
    ProfileController->>Profile: findOne()
    Profile-->>ProfileController: profile
    ProfileController->>Profile: update(profile data)
    ProfileController->>Profile: updateTranslations(translations)
    Profile-->>ProfileController: updated profile
    ProfileController-->>Client: 200 OK (formatted profile)
    
    Client->>ProfileController: POST /api/profile/photo (photo)
    ProfileController->>FileUploadService: uploadFile(photo, 'profile')
    FileUploadService-->>ProfileController: photoPath
    ProfileController->>Profile: update({photo: photoPath})
    Profile-->>ProfileController: updated profile
    ProfileController-->>Client: 200 OK (photo)

    Note over Client,Project: Project Management Flow
    Client->>ProjectsController: GET /api/projects?lang=en
    ProjectsController->>Project: findAll(include: [ProjectTranslation, ProjectImage])
    Project-->>ProjectsController: projects
    ProjectsController-->>Client: 200 OK (formatted projects)
    
    Client->>ProjectsController: POST /api/projects (project data)
    ProjectsController->>Project: create(project data)
    Project-->>ProjectsController: new project
    ProjectsController->>Project: createTranslations(translations)
    Project-->>ProjectsController: project with translations
    ProjectsController-->>Client: 201 Created (formatted project)
    
    Client->>ProjectsController: POST /api/projects/:id/images (image)
    ProjectsController->>FileUploadService: uploadFile(image, 'projects')
    FileUploadService-->>ProjectsController: imagePath
    ProjectsController->>Project: addImage(imagePath)
    Project-->>ProjectsController: updated project
    ProjectsController-->>Client: 201 Created (image)

    Note over Client,Article: Article Management Flow
    Client->>ArticlesController: GET /api/articles?lang=en&page=1&limit=10
    ArticlesController->>Article: findAll(include: [ArticleTranslation])
    Article-->>ArticlesController: articles
    ArticlesController-->>Client: 200 OK (formatted articles)
    
    Client->>ArticlesController: POST /api/articles (article data, cover_image)
    ArticlesController->>FileUploadService: uploadFile(cover_image, 'articles')
    FileUploadService-->>ArticlesController: coverImagePath
    ArticlesController->>Article: create({cover_image: coverImagePath})
    Article-->>ArticlesController: new article
    ArticlesController->>Article: createTranslations(translations)
    Article-->>ArticlesController: article with translations
    ArticlesController-->>Client: 201 Created (formatted article)
    
    Client->>ArticlesController: GET /api/articles/slug/:slug?lang=en
    ArticlesController->>Article: findBySlug(slug, lang)
    Article-->>ArticlesController: article
    ArticlesController-->>Client: 200 OK (formatted article)

    Note over Client,Expertise: Expertise Management Flow
    Client->>ExpertiseController: GET /api/expertise?lang=en
    ExpertiseController->>Expertise: findAll(include: [ExpertiseTranslation])
    Expertise-->>ExpertiseController: expertise list
    ExpertiseController-->>Client: 200 OK (formatted expertise)
    
    Client->>ExpertiseController: POST /api/expertise (expertise data)
    ExpertiseController->>Expertise: create({icon, display_order})
    Expertise-->>ExpertiseController: created expertise
    ExpertiseController->>Expertise: createTranslations(translations)
    Expertise-->>ExpertiseController: expertise with translations
    ExpertiseController-->>Client: 201 Created (formatted expertise)
    
    Client->>ExpertiseController: PUT /api/expertise/order (orderData)
    ExpertiseController->>Expertise: updateOrder(orderData)
    Expertise-->>ExpertiseController: updated expertise list
    ExpertiseController-->>Client: 200 OK (updated expertise)