#!/bin/bash

echo "üß™ Tests complets SEO et Performance - Portfolio M√©lissa Colin"
echo "=============================================================="

# Fonction pour afficher les r√©sultats avec couleurs
print_result() {
    if [ $1 -eq 0 ]; then
        echo "‚úÖ $2"
    else
        echo "‚ùå $2"
    fi
}

print_info() {
    echo "‚ÑπÔ∏è  $1"
}

print_warning() {
    echo "‚ö†Ô∏è  $1"
}

# Test 1: V√©rifier la structure des fichiers SEO
echo ""
echo "üìÅ Test 1: V√©rification des fichiers SEO critiques"
echo "---------------------------------------------------"

test -f "public/sitemap.xml" && print_result 0 "sitemap.xml pr√©sent" || print_result 1 "sitemap.xml manquant"
test -f "public/robots.txt" && print_result 0 "robots.txt pr√©sent" || print_result 1 "robots.txt manquant"
test -f "public/.htaccess" && print_result 0 ".htaccess pr√©sent" || print_result 1 ".htaccess manquant"
test -f ".env" && print_result 0 ".env pr√©sent (Google Analytics)" || print_result 1 ".env manquant"

# Test 2: V√©rifier les images optimis√©es
echo ""
echo "üñºÔ∏è  Test 2: V√©rification des images optimis√©es"
echo "----------------------------------------------"

if [ -d "public/assets/images" ]; then
    image_count=$(find public/assets/images -name "*.jpg" -o -name "*.png" | wc -l)
    large_images=$(find public/assets/images -name "*.jpg" -o -name "*.png" -size +500k | wc -l)
    
    print_info "Images trouv√©es: $image_count"
    
    if [ $large_images -eq 0 ]; then
        print_result 0 "Toutes les images sont optimis√©es (<500KB)"
    else
        print_warning "$large_images images d√©passent 500KB"
        echo "Images lourdes d√©tect√©es:"
        find public/assets/images -name "*.jpg" -o -name "*.png" -size +500k -exec ls -lh {} \;
    fi
else
    print_result 1 "Dossier images manquant"
fi

# Test 3: Build du projet
echo ""
echo "üèóÔ∏è  Test 3: Build du projet"
echo "---------------------------"

print_info "Installation des d√©pendances..."
if pnpm install --silent > /dev/null 2>&1; then
    print_result 0 "Installation des d√©pendances r√©ussie"
else
    print_result 1 "√âchec de l'installation des d√©pendances"
    exit 1
fi

print_info "Build du projet..."
if pnpm build > build.log 2>&1; then
    print_result 0 "Build r√©ussi"
    
    # V√©rifier la taille des bundles
    if [ -d "dist" ]; then
        echo ""
        echo "üìä Analyse des bundles g√©n√©r√©s:"
        echo "------------------------------"
        
        # Taille totale du build
        total_size=$(du -sh dist | cut -f1)
        print_info "Taille totale du build: $total_size"
        
        # Taille des fichiers JS
        if [ -d "dist/assets" ]; then
            js_files=$(find dist/assets -name "*.js" -exec ls -lh {} \; | awk '{print $5 " " $9}')
            echo "Fichiers JavaScript:"
            echo "$js_files"
            
            # V√©rifier si des bundles d√©passent 1MB
            large_js=$(find dist/assets -name "*.js" -size +1M | wc -l)
            if [ $large_js -eq 0 ]; then
                print_result 0 "Tous les bundles JS sont < 1MB"
            else
                print_warning "$large_js bundles JS d√©passent 1MB"
            fi
        fi
        
        # V√©rifier que le HTML contient l'ID Google Analytics
        if grep -q "VITE_GOOGLE_ANALYTICS_ID" dist/index.html; then
            print_warning "L'ID Google Analytics n'est pas inject√© dans le build"
        else
            print_result 0 "Google Analytics correctement configur√© dans le build"
        fi
    fi
else
    print_result 1 "√âchec du build"
    echo "Erreurs de build:"
    cat build.log
    exit 1
fi

# Test 4: Linter et qualit√© du code
echo ""
echo "üîç Test 4: Qualit√© du code"
echo "--------------------------"

if pnpm lint > lint.log 2>&1; then
    print_result 0 "Pas d'erreurs de linting d√©tect√©es"
else
    print_warning "Erreurs de linting d√©tect√©es"
    echo "Erreurs de linting:"
    cat lint.log
fi

# Test 5: V√©rification des composants SEO
echo ""
echo "üîé Test 5: Int√©gration des composants SEO"
echo "-----------------------------------------"

seo_components=("SEOHead" "WebVitalsMonitor" "OptimizedImage")
for component in "${seo_components[@]}"; do
    if grep -r "$component" src/ > /dev/null; then
        print_result 0 "Composant $component utilis√©"
    else
        print_result 1 "Composant $component non utilis√©"
    fi
done

# Test 6: Test du serveur de d√©veloppement
echo ""
echo "üåê Test 6: D√©marrage du serveur de d√©veloppement"
echo "------------------------------------------------"

print_info "D√©marrage du serveur de d√©veloppement..."
print_info "Le serveur sera accessible sur http://localhost:5173"
print_info "V√©rifiez manuellement:"
print_info "  ‚Ä¢ Les images se chargent rapidement avec lazy loading"
print_info "  ‚Ä¢ Les Web Vitals s'affichent dans la console"
print_info "  ‚Ä¢ Les m√©tadonn√©es SEO sont pr√©sentes dans chaque page"
print_info "  ‚Ä¢ Le Google Analytics fonctionne (r√©seau dans DevTools)"

echo ""
echo "‚ö° Conseils d'optimisation suppl√©mentaires:"
echo "------------------------------------------"
echo "1. Utilisez Lighthouse pour auditer le site d√©ploy√©"
echo "2. Testez la vitesse sur PageSpeed Insights"
echo "3. V√©rifiez l'indexation avec Google Search Console"
echo "4. Surveillez les Core Web Vitals en production"
echo "5. Testez les meta donn√©es avec l'outil Facebook Debugger"

echo ""
echo "üöÄ Pour d√©ployer:"
echo "‚Ä¢ Ex√©cutez: ./deploy.sh"
echo "‚Ä¢ Ou utilisez: ./build-optimized.sh pour un build avec optimisations"

echo ""
echo "Appuyez sur Entr√©e pour d√©marrer le serveur de d√©veloppement (Ctrl+C pour arr√™ter)..."
read

# D√©marrer le serveur de d√©veloppement
pnpm dev
